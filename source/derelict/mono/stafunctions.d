/*
Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted,free of charge,to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use,reproduce,display,distribute,
execute,and transmit the Software,and to prepare derivative works of the
Software,and to permit third-parties to whom the Software is furnished to
do so,all subject to the following:

The copyright notices in the Software and this entire statement,including
the above license grant,this restriction and the following disclaimer,
must be included in all copies of the Software,in whole or in part,and
all derivative works of the Software,unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS",WITHOUT WARRANTY OF ANY KIND,EXPRESS OR
IMPLIED,INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE,TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY,WHETHER IN CONTRACT,TORT OR OTHERWISE,
ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module derelict.mono.stafunctions;
version(DerelictMono_Static):

// Regex replace from dynfunctions:
// alias da_([a-zA-Z_]+) = (((?! function).)+ )function(([^;]|\s|\n)+;)
// $2$1$4

private
{
	import core.stdc.config;
	import core.stdc.stdint;
	import core.stdc.stdio;
	import derelict.mono.types;
}

extern (C) @nogc nothrow
{
	// utils/mono-publib.h
	void mono_free(void*);
	mono_bool mono_set_allocator_vtable(MonoAllocatorVTable*);
	// utils/mono-logger.h
	void mono_trace_set_level_string(const(char)* value);
	void mono_trace_set_mask_string(const(char)* value);
	void mono_trace_set_log_handler(MonoLogCallback callback, void* user_data);
	void mono_trace_set_print_handler(MonoPrintCallback callback);
	void mono_trace_set_printerr_handler(MonoPrintCallback callback);
	// utils/mono-error.h
	void mono_error_init(MonoError*);
	void mono_error_init_flags(MonoError*, ushort);
	void mono_error_cleanup(MonoError*);
	mono_bool mono_error_ok(MonoError*);
	ushort mono_error_get_error_code(MonoError*);
	const(char)* mono_error_get_message(MonoError*);
	// utils/mono-dl-fallback.h
	MonoDlFallbackHandler* mono_dl_fallback_register(MonoDlFallbackLoad load_func,
			MonoDlFallbackSymbol symbol_func, MonoDlFallbackClose close_func, void* user_data);
	void mono_dl_fallback_unregister(MonoDlFallbackHandler* handler);
	// utils/mono-counters.h
	void mono_counters_enable(int section_mask);
	void mono_counters_init();
	void mono_counters_register(const(char)* descr, int type, void* addr);
	void mono_counters_register_with_size(const(char)* name,
			int type, void* addr, int size);
	void mono_counters_on_register(MonoCounterRegisterCallback callback);
	void mono_counters_dump(int section_mask, FILE* outfile);
	void mono_counters_cleanup();
	void mono_counters_foreach(CountersEnumCallback cb, void* user_data);
	int mono_counters_sample(MonoCounter* counter, void* buffer, int buffer_size);
	const(char)* mono_counter_get_name(MonoCounter* name);
	int mono_counter_get_type(MonoCounter* counter);
	int mono_counter_get_section(MonoCounter* counter);
	int mono_counter_get_unit(MonoCounter* counter);
	int mono_counter_get_variance(MonoCounter* counter);
	size_t mono_counter_get_size(MonoCounter* counter);
	int mono_runtime_resource_limit(int resource_type,
			uintptr_t soft_limit, uintptr_t hard_limit);
	void mono_runtime_resource_set_callback(MonoResourceCallback callback);
	void mono_runtime_resource_check_limit(int resource_type, uintptr_t value);
	// metadata/appdomain.h
	MonoDomain* mono_init(const(char)* filename);
	MonoDomain* mono_init_from_assembly(const(char)* domain_name,
			const(char)* filename);
	MonoDomain* mono_init_version(const(char)* domain_name,
			const(char)* version_);
	MonoDomain* mono_get_root_domain();
	void mono_runtime_init(MonoDomain* domain,
			MonoThreadStartCB start_cb, MonoThreadAttachCB attach_cb);
	void mono_runtime_cleanup(MonoDomain* domain);
	void mono_install_runtime_cleanup(MonoDomainFunc func);
	void mono_runtime_quit();
	void mono_runtime_set_shutting_down();
	mono_bool mono_runtime_is_shutting_down();
	const(char)* mono_check_corlib_version();
	MonoDomain* mono_domain_create();
	MonoDomain* mono_domain_create_appdomain(char* friendly_name,
			char* configuration_file);
	void mono_domain_set_config(MonoDomain* domain,
			const(char)* base_dir, const(char)* config_file_name);
	MonoDomain* mono_domain_get();
	MonoDomain* mono_domain_get_by_id(int domainid);
	int mono_domain_get_id(MonoDomain* domain);
	const(char)* mono_domain_get_friendly_name(MonoDomain* domain);
	mono_bool mono_domain_set(MonoDomain* domain, mono_bool force);
	void mono_domain_set_internal(MonoDomain* domain);
	void mono_domain_unload(MonoDomain* domain);
	void mono_domain_try_unload(MonoDomain* domain, MonoObject** exc);
	mono_bool mono_domain_is_unloading(MonoDomain* domain);
	MonoDomain* mono_domain_from_appdomain(MonoAppDomain* appdomain);
	void mono_domain_foreach(MonoDomainFunc func, void* user_data);
	MonoAssembly* mono_domain_assembly_open(MonoDomain* domain,
			const(char)* name);
	mono_bool mono_domain_finalize(MonoDomain* domain, uint timeout);
	void mono_domain_free(MonoDomain* domain, mono_bool force);
	mono_bool mono_domain_has_type_resolve(MonoDomain* domain);
	MonoReflectionAssembly* mono_domain_try_type_resolve(
			MonoDomain* domain, char* name, MonoObject* tb);
	mono_bool mono_domain_owns_vtable_slot(MonoDomain* domain,
			void* vtable_slot);
	void mono_context_init(MonoDomain* domain);
	void mono_context_set(MonoAppContext* new_context);
	MonoAppContext* mono_context_get();
	int mono_context_get_id(MonoAppContext* context);
	int mono_context_get_domain_id(MonoAppContext* context);
	MonoJitInfo* mono_jit_info_table_find(MonoDomain* domain, char* addr);
	void* mono_jit_info_get_code_start(MonoJitInfo* ji);
	int mono_jit_info_get_code_size(MonoJitInfo* ji);
	MonoMethod* mono_jit_info_get_method(MonoJitInfo* ji);
	MonoImage* mono_get_corlib();
	MonoClass* mono_get_object_class();
	MonoClass* mono_get_byte_class();
	MonoClass* mono_get_void_class();
	MonoClass* mono_get_boolean_class();
	MonoClass* mono_get_sbyte_class();
	alias da_mono_get_int16_class = MonoClass* function();
	alias da_mono_get_uint16_class = MonoClass* function();
	alias da_mono_get_int32_class = MonoClass* function();
	alias da_mono_get_uint32_class = MonoClass* function();
	MonoClass* mono_get_intptr_class();
	MonoClass* mono_get_uintptr_class();
	alias da_mono_get_int64_class = MonoClass* function();
	alias da_mono_get_uint64_class = MonoClass* function();
	MonoClass* mono_get_single_class();
	MonoClass* mono_get_double_class();
	MonoClass* mono_get_char_class();
	MonoClass* mono_get_string_class();
	MonoClass* mono_get_enum_class();
	MonoClass* mono_get_array_class();
	MonoClass* mono_get_thread_class();
	MonoClass* mono_get_exception_class();
	void mono_security_enable_core_clr();
	void mono_security_set_core_clr_platform_callback(
			MonoCoreClrPlatformCB callback);
	// metadata/assembly.h
	void mono_assemblies_init();
	void mono_assemblies_cleanup();
	MonoAssembly* mono_assembly_open(const(char)* filename,
			MonoImageOpenStatus* status);
	MonoAssembly* mono_assembly_open_full(const(char)* filename,
			MonoImageOpenStatus* status, mono_bool refonly);
	MonoAssembly* mono_assembly_load(MonoAssemblyName* aname,
			const(char)* basedir, MonoImageOpenStatus* status);
	MonoAssembly* mono_assembly_load_full(MonoAssemblyName* aname,
			const(char)* basedir, MonoImageOpenStatus* status, mono_bool refonly);
	MonoAssembly* mono_assembly_load_from(MonoImage* image,
			const(char)* fname, MonoImageOpenStatus* status);
	MonoAssembly* mono_assembly_load_from_full(MonoImage* image,
			const(char)* fname, MonoImageOpenStatus* status, mono_bool refonly);
	MonoAssembly* mono_assembly_load_with_partial_name(
			const(char)* name, MonoImageOpenStatus* status);
	MonoAssembly* mono_assembly_loaded(MonoAssemblyName* aname);
	MonoAssembly* mono_assembly_loaded_full(MonoAssemblyName* aname,
			mono_bool refonly);
	void mono_assembly_get_assemblyref(MonoImage* image,
			int index, MonoAssemblyName* aname);
	void mono_assembly_load_reference(MonoImage* image, int index);
	void mono_assembly_load_references(MonoImage* image,
			MonoImageOpenStatus* status);
	MonoImage* mono_assembly_load_module(MonoAssembly* assembly, uint idx);
	void mono_assembly_close(MonoAssembly* assembly);
	void mono_assembly_setrootdir(const(char)* root_dir);
	const(char)* mono_assembly_getrootdir();
	char* mono_native_getrootdir();
	void mono_assembly_foreach(MonoFunc func, void* user_data);
	void mono_assembly_set_main(MonoAssembly* assembly);
	MonoAssembly* mono_assembly_get_main();
	MonoImage* mono_assembly_get_image(MonoAssembly* assembly);
	MonoAssemblyName* mono_assembly_get_name(MonoAssembly* assembly);
	mono_bool mono_assembly_fill_assembly_name(MonoImage* image,
			MonoAssemblyName* aname);
	mono_bool mono_assembly_names_equal(MonoAssemblyName* l,
			MonoAssemblyName* r);
	char* mono_stringify_assembly_name(MonoAssemblyName* aname);
	void mono_install_assembly_load_hook(MonoAssemblyLoadFunc func,
			void* user_data);
	void mono_install_assembly_search_hook(
			MonoAssemblySearchFunc func, void* user_data);
	void mono_install_assembly_refonly_search_hook(
			MonoAssemblySearchFunc func, void* user_data);
	MonoAssembly* mono_assembly_invoke_search_hook(MonoAssemblyName* aname);
	void mono_install_assembly_postload_search_hook(
			MonoAssemblySearchFunc func, void* user_data);
	void mono_install_assembly_postload_refonly_search_hook(
			MonoAssemblySearchFunc func, void* user_data);
	void mono_install_assembly_preload_hook(
			MonoAssemblyPreLoadFunc func, void* user_data);
	void mono_install_assembly_refonly_preload_hook(
			MonoAssemblyPreLoadFunc func, void* user_data);
	void mono_assembly_invoke_load_hook(MonoAssembly* ass);
	MonoAssemblyName* mono_assembly_name_new(const(char)* name);
	const(char)* mono_assembly_name_get_name(MonoAssemblyName* aname);
	const(char)* mono_assembly_name_get_culture(MonoAssemblyName* aname);
	ushort mono_assembly_name_get_version(MonoAssemblyName* aname,
			ushort* minor, ushort* build, ushort* revision);
	mono_byte* mono_assembly_name_get_pubkeytoken(MonoAssemblyName* aname);
	void mono_assembly_name_free(MonoAssemblyName* aname);
	void mono_register_bundled_assemblies(
			const(MonoBundledAssembly*)* assemblies);
	void mono_register_config_for_assembly(
			const(char)* assembly_name, const(char)* config_xml);
	void mono_register_symfile_for_assembly(
			const(char)* assembly_name, const(mono_byte)* raw_contents, int size);
	void mono_register_machine_config(const(char)* config_xml);
	void mono_set_rootdir();
	void mono_set_dirs(const(char)* assembly_dir, const(char)* config_dir);
	void mono_set_assemblies_path(const(char)* path);
	// metadata/attrdefs.h
	// metadata/blob.h
	// metadata/class.h
	MonoClass* mono_class_get(MonoImage* image, uint type_token);
	MonoClass* mono_class_get_full(MonoImage* image,
			uint type_token, MonoGenericContext* context);
	mono_bool mono_class_init(MonoClass* klass);
	MonoVTable* mono_class_vtable(MonoDomain* domain, MonoClass* klass);
	MonoClass* mono_class_from_name(MonoImage* image,
			const(char)* name_space, const(char)* name);
	MonoClass* mono_class_from_name_case(MonoImage* image,
			const(char)* name_space, const(char)* name);
	MonoMethod* mono_class_get_method_from_name_flags(
			MonoClass* klass, const(char)* name, int param_count, int flags);
	MonoClass* mono_class_from_typeref(MonoImage* image, uint type_token);
	MonoClass* mono_class_from_typeref_checked(MonoImage* image,
			uint type_token, MonoError* error);
	MonoClass* mono_class_from_generic_parameter(
			MonoGenericParam* param, MonoImage* image, mono_bool is_mvar);
	MonoType* mono_class_inflate_generic_type(MonoType* type,
			MonoGenericContext* context);
	MonoMethod* mono_class_inflate_generic_method(
			MonoMethod* method, MonoGenericContext* context);
	MonoMethod* mono_get_inflated_method(MonoMethod* method);
	MonoClassField* mono_field_from_token(MonoImage* image,
			uint token, MonoClass** retklass, MonoGenericContext* context);
	MonoClass* mono_bounded_array_class_get(
			MonoClass* element_class, uint rank, mono_bool bounded);
	MonoClass* mono_array_class_get(MonoClass* element_class, uint rank);
	MonoClass* mono_ptr_class_get(MonoType* type);
	MonoClassField* mono_class_get_field(MonoClass* klass, uint field_token);
	MonoClassField* mono_class_get_field_from_name(MonoClass* klass,
			const(char)* name);
	uint mono_class_get_field_token(MonoClassField* field);
	uint mono_class_get_event_token(MonoEvent* event);
	MonoProperty* mono_class_get_property_from_name(
			MonoClass* klass, const(char)* name);
	uint mono_class_get_property_token(MonoProperty* prop);
	int mono_array_element_size(MonoClass* ac);
	int mono_class_instance_size(MonoClass* klass);
	int mono_class_array_element_size(MonoClass* klass);
	int mono_class_data_size(MonoClass* klass);
	int mono_class_value_size(MonoClass* klass, uint* align_);
	int mono_class_min_align(MonoClass* klass);
	MonoClass* mono_class_from_mono_type(MonoType* type);
	mono_bool mono_class_is_subclass_of(MonoClass* klass,
			MonoClass* klassc, mono_bool check_interfaces);
	mono_bool mono_class_is_assignable_from(MonoClass* klass, MonoClass* oklass);
	void* mono_ldtoken(MonoImage* image, uint token,
			MonoClass** retclass, MonoGenericContext* context);
	char* mono_type_get_name(MonoType* type);
	MonoType* mono_type_get_underlying_type(MonoType* type);
	MonoImage* mono_class_get_image(MonoClass* klass);
	MonoClass* mono_class_get_element_class(MonoClass* klass);
	mono_bool mono_class_is_valuetype(MonoClass* klass);
	mono_bool mono_class_is_enum(MonoClass* klass);
	MonoType* mono_class_enum_basetype(MonoClass* klass);
	MonoClass* mono_class_get_parent(MonoClass* klass);
	MonoClass* mono_class_get_nesting_type(MonoClass* klass);
	int mono_class_get_rank(MonoClass* klass);
	uint mono_class_get_flags(MonoClass* klass);
	const(char)* mono_class_get_name(MonoClass* klass);
	const(char)* mono_class_get_namespace(MonoClass* klass);
	MonoType* mono_class_get_type(MonoClass* klass);
	uint mono_class_get_type_token(MonoClass* klass);
	MonoType* mono_class_get_byref_type(MonoClass* klass);
	int mono_class_num_fields(MonoClass* klass);
	int mono_class_num_methods(MonoClass* klass);
	int mono_class_num_properties(MonoClass* klass);
	int mono_class_num_events(MonoClass* klass);
	MonoClassField* mono_class_get_fields(MonoClass* klass, void** iter);
	MonoMethod* mono_class_get_methods(MonoClass* klass, void** iter);
	MonoProperty* mono_class_get_properties(MonoClass* klass, void** iter);
	MonoEvent* mono_class_get_events(MonoClass* klass, void** iter);
	MonoClass* mono_class_get_interfaces(MonoClass* klass, void** iter);
	MonoClass* mono_class_get_nested_types(MonoClass* klass, void** iter);
	mono_bool mono_class_is_delegate(MonoClass* klass);
	mono_bool mono_class_implements_interface(MonoClass* klass,
			MonoClass* iface);
	const(char)* mono_field_get_name(MonoClassField* field);
	MonoType* mono_field_get_type(MonoClassField* field);
	MonoClass* mono_field_get_parent(MonoClassField* field);
	uint mono_field_get_flags(MonoClassField* field);
	uint mono_field_get_offset(MonoClassField* field);
	const(char)* mono_field_get_data(MonoClassField* field);
	const(char)* mono_property_get_name(MonoProperty* prop);
	MonoMethod* mono_property_get_set_method(MonoProperty* prop);
	MonoMethod* mono_property_get_get_method(MonoProperty* prop);
	MonoClass* mono_property_get_parent(MonoProperty* prop);
	uint mono_property_get_flags(MonoProperty* prop);
	const(char)* mono_event_get_name(MonoEvent* event);
	MonoMethod* mono_event_get_add_method(MonoEvent* event);
	MonoMethod* mono_event_get_remove_method(MonoEvent* event);
	MonoMethod* mono_event_get_raise_method(MonoEvent* event);
	MonoClass* mono_event_get_parent(MonoEvent* event);
	uint mono_event_get_flags(MonoEvent* event);
	MonoMethod* mono_class_get_method_from_name(MonoClass* klass,
			const(char)* name, int param_count);
	char* mono_class_name_from_token(MonoImage* image, uint type_token);
	mono_bool mono_method_can_access_field(MonoMethod* method,
			MonoClassField* field);
	mono_bool mono_method_can_access_method(MonoMethod* method,
			MonoMethod* called);
	// metadata/debug-helpers.h
	char* mono_disasm_code_one(MonoDisHelper* dh,
			MonoMethod* method, const(mono_byte)* ip, const(mono_byte*)* endp);
	char* mono_disasm_code(MonoDisHelper* dh,
			MonoMethod* method, const(mono_byte)* ip, const(mono_byte)* end);
	char* mono_type_full_name(MonoType* type);
	char* mono_signature_get_desc(MonoMethodSignature* sig,
			mono_bool include_namespace);
	char* mono_context_get_desc(MonoGenericContext* context);
	MonoMethodDesc* mono_method_desc_new(const(char)* name,
			mono_bool include_namespace);
	MonoMethodDesc* mono_method_desc_from_method(MonoMethod* method);
	void mono_method_desc_free(MonoMethodDesc* desc);
	mono_bool mono_method_desc_match(MonoMethodDesc* desc, MonoMethod* method);
	mono_bool mono_method_desc_full_match(MonoMethodDesc* desc,
			MonoMethod* method);
	MonoMethod* mono_method_desc_search_in_class(
			MonoMethodDesc* desc, MonoClass* klass);
	MonoMethod* mono_method_desc_search_in_image(
			MonoMethodDesc* desc, MonoImage* image);
	char* mono_method_full_name(MonoMethod* method, mono_bool signature);
	char* mono_field_full_name(MonoClassField* field);
	// metadata/debug-mono-symfile.h
	MonoSymbolFile* mono_debug_open_mono_symbols(MonoDebugHandle* handle,
			const(ubyte)* raw_contents, int size, mono_bool in_the_debugger);
	void mono_debug_close_mono_symbol_file(MonoSymbolFile* symfile);
	mono_bool mono_debug_symfile_is_loaded(MonoSymbolFile* symfile);
	MonoDebugSourceLocation* mono_debug_symfile_lookup_location(
			MonoDebugMethodInfo* minfo, uint offset);
	void mono_debug_symfile_free_location(MonoDebugSourceLocation* location);
	MonoDebugMethodInfo* mono_debug_symfile_lookup_method(
			MonoDebugHandle* handle, MonoMethod* method);
	MonoDebugLocalsInfo* mono_debug_symfile_lookup_locals(
			MonoDebugMethodInfo* minfo);
	int mono_debug_image_has_debug_info(MonoImage* image);
	// metadata/environment.h
	int mono_environment_exitcode_get();
	void mono_environment_exitcode_set(int value);
	// metadata/exception.h
	MonoException* mono_exception_from_name(MonoImage* image,
			const(char)* name_space, const(char)* name);
	MonoException* mono_exception_from_token(MonoImage* image, uint token);
	MonoException* mono_exception_from_name_two_strings(MonoImage* image,
			const(char)* name_space, const(char)* name, MonoString* a1, MonoString* a2);
	MonoException* mono_exception_from_name_msg(MonoImage* image,
			const(char)* name_space, const(char)* name, const(char)* msg);
	MonoException* mono_exception_from_token_two_strings(
			MonoImage* image, uint token, MonoString* a1, MonoString* a2);
	MonoException* mono_exception_from_name_domain(MonoDomain* domain,
			MonoImage* image, const(char)* name_space, const(char)* name);
	MonoException* mono_get_exception_divide_by_zero();
	MonoException* mono_get_exception_security();
	MonoException* mono_get_exception_arithmetic();
	MonoException* mono_get_exception_overflow();
	MonoException* mono_get_exception_null_reference();
	MonoException* mono_get_exception_execution_engine(const(char)* msg);
	MonoException* mono_get_exception_thread_abort();
	MonoException* mono_get_exception_thread_state(const(char)* msg);
	MonoException* mono_get_exception_thread_interrupted();
	MonoException* mono_get_exception_serialization(const(char)* msg);
	MonoException* mono_get_exception_invalid_cast();
	MonoException* mono_get_exception_invalid_operation(const(char)* msg);
	MonoException* mono_get_exception_index_out_of_range();
	MonoException* mono_get_exception_array_type_mismatch();
	MonoException* mono_get_exception_type_load(
			MonoString* class_name, char* assembly_name);
	MonoException* mono_get_exception_missing_method(
			const(char)* class_name, const(char)* member_name);
	MonoException* mono_get_exception_missing_field(
			const(char)* class_name, const(char)* member_name);
	MonoException* mono_get_exception_not_implemented(const(char)* msg);
	MonoException* mono_get_exception_not_supported(const(char)* msg);
	MonoException* mono_get_exception_argument_null(const(char)* arg);
	MonoException* mono_get_exception_argument(const(char)* arg,
			const(char)* msg);
	MonoException* mono_get_exception_argument_out_of_range(const(char)* arg);
	MonoException* mono_get_exception_io(const(char)* msg);
	MonoException* mono_get_exception_file_not_found(MonoString* fname);
	alias da_mono_get_exception_file_not_found2 = MonoException* function(
			const(char)* msg, MonoString* fname);
	MonoException* mono_get_exception_type_initialization(
			const(char)* type_name, MonoException* inner);
	MonoException* mono_get_exception_synchronization_lock(const(char)* msg);
	MonoException* mono_get_exception_cannot_unload_appdomain(const(char)* msg);
	MonoException* mono_get_exception_appdomain_unloaded();
	MonoException* mono_get_exception_bad_image_format(const(char)* msg);
	alias da_mono_get_exception_bad_image_format2 = MonoException* function(
			const(char)* msg, MonoString* fname);
	MonoException* mono_get_exception_stack_overflow();
	MonoException* mono_get_exception_out_of_memory();
	MonoException* mono_get_exception_field_access();
	MonoException* mono_get_exception_method_access();
	MonoException* mono_get_exception_reflection_type_load(
			MonoArray* types, MonoArray* exceptions);
	MonoException* mono_get_exception_runtime_wrapped(
			MonoObject* wrapped_exception);
	void mono_install_unhandled_exception_hook(
			MonoUnhandledExceptionFunc func, void* user_data);
	void mono_invoke_unhandled_exception_hook(MonoObject* exc);
	// metadata/image.h
	void mono_images_init();
	void mono_images_cleanup();
	MonoImage* mono_image_open(const(char)* fname, MonoImageOpenStatus* status);
	MonoImage* mono_image_open_full(const(char)* fname,
			MonoImageOpenStatus* status, mono_bool refonly);
	MonoImage* mono_pe_file_open(const(char)* fname,
			MonoImageOpenStatus* status);
	MonoImage* mono_image_open_from_data(char* data,
			uint data_len, mono_bool need_copy, MonoImageOpenStatus* status);
	MonoImage* mono_image_open_from_data_full(char* data,
			uint data_len, mono_bool need_copy, MonoImageOpenStatus* status, mono_bool refonly);
	MonoImage* mono_image_open_from_data_with_name(char* data, uint data_len,
			mono_bool need_copy, MonoImageOpenStatus* status, mono_bool refonly, const(char)* name);
	void mono_image_fixup_vtable(MonoImage* image);
	MonoImage* mono_image_loaded(const(char)* name);
	MonoImage* mono_image_loaded_full(const(char)* name, mono_bool refonly);
	MonoImage* mono_image_loaded_by_guid(const(char)* guid);
	MonoImage* mono_image_loaded_by_guid_full(const(char)* guid,
			mono_bool refonly);
	void mono_image_init(MonoImage* image);
	void mono_image_close(MonoImage* image);
	void mono_image_addref(MonoImage* image);
	const(char)* mono_image_strerror(MonoImageOpenStatus status);
	int mono_image_ensure_section(MonoImage* image, const(char)* section);
	int mono_image_ensure_section_idx(MonoImage* image, int section);
	uint mono_image_get_entry_point(MonoImage* image);
	const(char)* mono_image_get_resource(MonoImage* image,
			uint offset, uint* size);
	MonoImage* mono_image_load_file_for_image(MonoImage* image, int fileidx);
	MonoImage* mono_image_load_module(MonoImage* image, int idx);
	const(char)* mono_image_get_name(MonoImage* image);
	const(char)* mono_image_get_filename(MonoImage* image);
	const(char)* mono_image_get_guid(MonoImage* image);
	MonoAssembly* mono_image_get_assembly(MonoImage* image);
	mono_bool mono_image_is_dynamic(MonoImage* image);
	char* mono_image_rva_map(MonoImage* image, uint rva);
	const(MonoTableInfo)* mono_image_get_table_info(
			MonoImage* image, int table_id);
	int mono_image_get_table_rows(MonoImage* image, int table_id);
	int mono_table_info_get_rows(const(MonoTableInfo)* table);
	void* mono_image_lookup_resource(MonoImage* image,
			uint res_id, uint lang_id, mono_unichar2* name);
	const(char)* mono_image_get_public_key(MonoImage* image, uint* size);
	const(char)* mono_image_get_strong_name(MonoImage* image, uint* size);
	uint mono_image_strong_name_position(MonoImage* image, uint* size);
	void mono_image_add_to_name_cache(MonoImage* image,
			const(char)* nspace, const(char)* name, uint idx);
	mono_bool mono_image_has_authenticode_entry(MonoImage* image);
	// metadata/loader.h
	MonoMethod* mono_get_method(MonoImage* image, uint token, MonoClass* klass);
	MonoMethod* mono_get_method_full(MonoImage* image,
			uint token, MonoClass* klass, MonoGenericContext* context);
	MonoMethod* mono_get_method_constrained(MonoImage* image, uint token,
			MonoClass* constrained_class, MonoGenericContext* context, MonoMethod** cil_method);
	void mono_free_method(MonoMethod* method);
	MonoMethodSignature* mono_method_get_signature_full(
			MonoMethod* method, MonoImage* image, uint token, MonoGenericContext* context);
	MonoMethodSignature* mono_method_get_signature(
			MonoMethod* method, MonoImage* image, uint token);
	MonoMethodSignature* mono_method_signature(MonoMethod* method);
	MonoMethodHeader* mono_method_get_header(MonoMethod* method);
	const(char)* mono_method_get_name(MonoMethod* method);
	MonoClass* mono_method_get_class(MonoMethod* method);
	uint mono_method_get_token(MonoMethod* method);
	uint mono_method_get_flags(MonoMethod* method, uint* iflags);
	uint mono_method_get_index(MonoMethod* method);
	MonoImage* mono_load_image(const(char)* fname, MonoImageOpenStatus* status);
	void mono_add_internal_call(const(char)* name, const(void)* method);
	void* mono_lookup_internal_call(MonoMethod* method);
	void* mono_lookup_internal_call_full(MonoMethod* method,
			mono_bool* uses_handles);
	const(char)* mono_lookup_icall_symbol(MonoMethod* m);
	void mono_dllmap_insert(MonoImage* assembly,
			const(char)* dll, const(char)* func, const(char)* tdll, const(char)* tfunc);
	void* mono_lookup_pinvoke_call(MonoMethod* method,
			const(char*)* exc_class, const(char*)* exc_arg);
	void mono_method_get_param_names(MonoMethod* method, const(char*)* names);
	uint mono_method_get_param_token(MonoMethod* method, int idx);
	void mono_method_get_marshal_info(MonoMethod* method,
			MonoMarshalSpec** mspecs);
	mono_bool mono_method_has_marshal_info(MonoMethod* method);
	MonoMethod* mono_method_get_last_managed();
	void mono_stack_walk(MonoStackWalk func, void* user_data);
	void mono_stack_walk_no_il(MonoStackWalk func, void* user_data);
	void mono_stack_walk_async_safe(MonoStackWalkAsyncSafe func,
			void* initial_sig_context, void* user_data);
	MonoMethodHeader* mono_method_get_header_checked(
			MonoMethod* method, MonoError* error);
	// metadata/metadata.h
	void mono_metadata_init();
	void mono_metadata_decode_row(const(MonoTableInfo)* t,
			int idx, uint* res, int res_size);
	uint mono_metadata_decode_row_col(const(MonoTableInfo)* t, int idx, uint col);
	int mono_metadata_compute_size(MonoImage* meta,
			int tableindex, uint* result_bitfield);
	const(char)* mono_metadata_locate(MonoImage* meta, int table, int idx);
	const(char)* mono_metadata_locate_token(MonoImage* meta, uint token);
	const(char)* mono_metadata_string_heap(MonoImage* meta, uint table_index);
	const(char)* mono_metadata_blob_heap(MonoImage* meta, uint table_index);
	const(char)* mono_metadata_user_string(MonoImage* meta, uint table_index);
	const(char)* mono_metadata_guid_heap(MonoImage* meta, uint table_index);
	uint mono_metadata_typedef_from_field(MonoImage* meta, uint table_index);
	uint mono_metadata_typedef_from_method(MonoImage* meta, uint table_index);
	uint mono_metadata_nested_in_typedef(MonoImage* meta, uint table_index);
	uint mono_metadata_nesting_typedef(MonoImage* meta,
			uint table_index, uint start_index);
	MonoClass** mono_metadata_interfaces_from_typedef(
			MonoImage* meta, uint table_index, uint* count);
	uint mono_metadata_events_from_typedef(MonoImage* meta,
			uint table_index, uint* end_idx);
	uint mono_metadata_methods_from_event(MonoImage* meta,
			uint table_index, uint* end);
	uint mono_metadata_properties_from_typedef(MonoImage* meta,
			uint table_index, uint* end);
	uint mono_metadata_methods_from_property(MonoImage* meta,
			uint table_index, uint* end);
	uint mono_metadata_packing_from_typedef(MonoImage* meta,
			uint table_index, uint* packing, uint* size);
	const(char)* mono_metadata_get_marshal_info(MonoImage* meta,
			uint idx, mono_bool is_field);
	uint mono_metadata_custom_attrs_from_index(MonoImage* meta, uint cattr_index);
	MonoMarshalSpec* mono_metadata_parse_marshal_spec(
			MonoImage* image, const(char)* ptr);
	void mono_metadata_free_marshal_spec(MonoMarshalSpec* spec);
	uint mono_metadata_implmap_from_method(MonoImage* meta, uint method_idx);
	void mono_metadata_field_info(MonoImage* meta,
			uint table_index, uint* offset, uint* rva, MonoMarshalSpec** marshal_spec);
	uint mono_metadata_get_constant_index(MonoImage* meta, uint token, uint hint);
	uint mono_metadata_decode_value(const(char)* ptr, const(char*)* rptr);
	int mono_metadata_decode_signed_value(const(char)* ptr, const(char*)* rptr);
	uint mono_metadata_decode_blob_size(const(char)* ptr, const(char*)* rptr);
	void mono_metadata_encode_value(uint value, char* bug, char** endbuf);
	mono_bool mono_type_is_byref(MonoType* type);
	int mono_type_get_type(MonoType* type);
	MonoMethodSignature* mono_type_get_signature(MonoType* type);
	MonoClass* mono_type_get_class(MonoType* type);
	MonoArrayType* mono_type_get_array_type(MonoType* type);
	MonoType* mono_type_get_ptr_type(MonoType* type);
	MonoClass* mono_type_get_modifiers(MonoType* type,
			mono_bool* is_required, void** iter);
	mono_bool mono_type_is_struct(MonoType* type);
	mono_bool mono_type_is_void(MonoType* type);
	mono_bool mono_type_is_pointer(MonoType* type);
	mono_bool mono_type_is_reference(MonoType* type);
	mono_bool mono_type_is_generic_parameter(MonoType* type);
	MonoType* mono_signature_get_return_type(MonoMethodSignature* sig);
	MonoType* mono_signature_get_params(MonoMethodSignature* sig, void** iter);
	uint mono_signature_get_param_count(MonoMethodSignature* sig);
	uint mono_signature_get_call_conv(MonoMethodSignature* sig);
	int mono_signature_vararg_start(MonoMethodSignature* sig);
	mono_bool mono_signature_is_instance(MonoMethodSignature* sig);
	mono_bool mono_signature_explicit_this(MonoMethodSignature* sig);
	mono_bool mono_signature_param_is_out(MonoMethodSignature* sig,
			int param_num);
	uint mono_metadata_parse_typedef_or_ref(MonoImage* m,
			const(char)* ptr, const(char*)* rptr);
	int mono_metadata_parse_custom_mod(MonoImage* m,
			MonoCustomMod* dest, const(char)* ptr, const(char*)* rptr);
	MonoArrayType* mono_metadata_parse_array(MonoImage* m,
			const(char)* ptr, const(char*)* rptr);
	void mono_metadata_free_array(MonoArrayType* array);
	MonoType* mono_metadata_parse_type(MonoImage* m,
			MonoParseTypeMode mode, short opt_attrs, const(char)* ptr, const(char*)* rptr);
	MonoType* mono_metadata_parse_param(MonoImage* m,
			const(char)* ptr, const(char*)* rptr);
	MonoType* mono_metadata_parse_ret_type(MonoImage* m,
			const(char)* ptr, const(char*)* rptr);
	MonoType* mono_metadata_parse_field_type(MonoImage* m,
			short field_flags, const(char)* ptr, const(char*)* rptr);
	MonoType* mono_type_create_from_typespec(MonoImage* image, uint type_spec);
	void mono_metadata_free_type(MonoType* type);
	int mono_type_size(MonoType* type, int* alignment);
	int mono_type_stack_size(MonoType* type, int* alignment);
	mono_bool mono_type_generic_inst_is_valuetype(MonoType* type);
	mono_bool mono_metadata_generic_class_is_valuetype(MonoGenericClass* gclass);
	uint mono_metadata_generic_class_hash(MonoGenericClass* gclass);
	mono_bool mono_metadata_generic_class_equal(
			MonoGenericClass* g1, MonoGenericClass* g2);
	uint mono_metadata_type_hash(MonoType* t1);
	mono_bool mono_metadata_type_equal(MonoType* t1, MonoType* t2);
	MonoMethodSignature* mono_metadata_signature_alloc(
			MonoImage* image, uint nparams);
	MonoMethodSignature* mono_metadata_signature_dup(MonoMethodSignature* sig);
	MonoMethodSignature* mono_metadata_parse_signature(
			MonoImage* image, uint token);
	MonoMethodSignature* mono_metadata_parse_method_signature(
			MonoImage* m, int def, const(char)* ptr, const(char*)* rptr);
	void mono_metadata_free_method_signature(MonoMethodSignature* method);
	mono_bool mono_metadata_signature_equal(
			MonoMethodSignature* sig1, MonoMethodSignature* sig2);
	uint mono_signature_hash(MonoMethodSignature* sig);
	MonoMethodHeader* mono_metadata_parse_mh(MonoImage* m, const(char)* ptr);
	void mono_metadata_free_mh(MonoMethodHeader* mh);
	const(ubyte)* mono_method_header_get_code(
			MonoMethodHeader* header, uint* code_size, uint* max_stack);
	MonoType** mono_method_header_get_locals(
			MonoMethodHeader* header, uint* num_locals, mono_bool* init_locals);
	int mono_method_header_get_num_clauses(MonoMethodHeader* header);
	int mono_method_header_get_clauses(MonoMethodHeader* header,
			MonoMethod* method, void** iter, MonoExceptionClause* clause);
	uint mono_type_to_unmanaged(MonoType* type,
			MonoMarshalSpec* mspec, mono_bool as_field, mono_bool unicode, MonoMarshalConv* conv);
	uint mono_metadata_token_from_dor(uint dor_index);
	char* mono_guid_to_string(const(ubyte)* guid);
	char* mono_guid_to_string_minimal(const(ubyte)* guid);
	uint mono_metadata_declsec_from_index(MonoImage* meta, uint idx);
	uint mono_metadata_translate_token_index(MonoImage* image,
			int table, uint idx);
	void mono_metadata_decode_table_row(MonoImage* image,
			int table, int idx, uint* res, int res_size);
	uint mono_metadata_decode_table_row_col(MonoImage* image,
			int table, int idx, uint col);
	// metadata/mono-config.h
	const(char)* mono_config_get_os();
	const(char)* mono_config_get_cpu();
	const(char)* mono_config_get_wordsize();
	const(char)* mono_get_config_dir();
	void mono_set_config_dir(const(char)* dir);
	const(char)* mono_get_machine_config();
	void mono_config_cleanup();
	void mono_config_parse(const(char)* filename);
	void mono_config_for_assembly(MonoImage* assembly);
	void mono_config_parse_memory(const(char)* buffer);
	const(char)* mono_config_string_for_assembly_file(const(char)* filename);
	void mono_config_set_server_mode(mono_bool server_mode);
	mono_bool mono_config_is_server_mode();
	// metadata/mono-debug.h
	void mono_debug_init(MonoDebugFormat format);
	void mono_debug_open_image_from_memory(MonoImage* image,
			const(mono_byte)* raw_contents, int size);
	void mono_debug_cleanup();
	void mono_debug_close_image(MonoImage* image);
	void mono_debug_domain_unload(MonoDomain* domain);
	void mono_debug_domain_create(MonoDomain* domain);
	MonoDebugMethodAddress* mono_debug_add_method(
			MonoMethod* method, MonoDebugMethodJitInfo* jit, MonoDomain* domain);
	void mono_debug_remove_method(MonoMethod* method, MonoDomain* domain);
	MonoDebugMethodInfo* mono_debug_lookup_method(MonoMethod* method);
	MonoDebugMethodAddressList* mono_debug_lookup_method_addresses(
			MonoMethod* method);
	MonoDebugMethodJitInfo* mono_debug_find_method(
			MonoMethod* method, MonoDomain* domain);
	void mono_debug_free_method_jit_info(MonoDebugMethodJitInfo* jit);
	void mono_debug_add_delegate_trampoline(void* code, int size);
	MonoDebugLocalsInfo* mono_debug_lookup_locals(MonoMethod* method);
	MonoDebugMethodAsyncInfo* mono_debug_lookup_method_async_debug_info(
			MonoMethod* method);
	MonoDebugSourceLocation* mono_debug_method_lookup_location(
			MonoDebugMethodInfo* minfo, int il_offset);
	MonoDebugSourceLocation* mono_debug_lookup_source_location(
			MonoMethod* method, uint address, MonoDomain* domain);
	int mono_debug_il_offset_from_address(MonoMethod* method,
			MonoDomain* domain, uint native_offset);
	void mono_debug_free_source_location(MonoDebugSourceLocation* location);
	char* mono_debug_print_stack_frame(MonoMethod* method,
			uint native_offset, MonoDomain* domain);
	int mono_debugger_method_has_breakpoint(MonoMethod* method);
	int mono_debugger_insert_breakpoint(const(char)* method_name,
			mono_bool include_namespace);
	void mono_set_is_debugger_attached(mono_bool attached);
	mono_bool mono_is_debugger_attached();
	// metadata/mono-gc.h
	void mono_gc_collect(int generation);
	int mono_gc_max_generation();
	int mono_gc_get_generation(MonoObject* object);
	int mono_gc_collection_count(int generation);
	long mono_gc_get_used_size();
	long mono_gc_get_heap_size();
	MonoBoolean mono_gc_pending_finalizers();
	void mono_gc_finalize_notify();
	int mono_gc_invoke_finalizers();
	int mono_gc_walk_heap(int flags, MonoGCReferences callback, void* data);
	// metadata/object.h
	mono_unichar2* mono_string_chars(MonoString* s);
	int mono_string_length(MonoString* s);
	MonoObject* mono_object_new(MonoDomain* domain, MonoClass* klass);
	MonoObject* mono_object_new_specific(MonoVTable* vtable);
	MonoObject* mono_object_new_fast(MonoVTable* vtable);
	MonoObject* mono_object_new_alloc_specific(MonoVTable* vtable);
	MonoObject* mono_object_new_from_token(MonoDomain* domain,
			MonoImage* image, uint token);
	MonoArray* mono_array_new(MonoDomain* domain, MonoClass* eclass, uintptr_t n);
	MonoArray* mono_array_new_full(MonoDomain* domain,
			MonoClass* array_class, uintptr_t* lengths, intptr_t* lower_bounds);
	MonoArray* mono_array_new_specific(MonoVTable* vtable, uintptr_t n);
	MonoArray* mono_array_clone(MonoArray* array);
	char* mono_array_addr_with_size(MonoArray* array, int size, uintptr_t idx);
	uintptr_t mono_array_length(MonoArray* array);
	MonoString* mono_string_empty(MonoDomain* domain);
	MonoString* mono_string_empty_wrapper();
	alias da_mono_string_new_utf16 = MonoString* function(MonoDomain* domain,
			const(mono_unichar2)* text, int len);
	MonoString* mono_string_new_size(MonoDomain* domain, int len);
	MonoString* mono_ldstr(MonoDomain* domain, MonoImage* image, uint str_index);
	MonoString* mono_string_is_interned(MonoString* str);
	MonoString* mono_string_intern(MonoString* str);
	MonoString* mono_string_new(MonoDomain* domain, const(char)* text);
	MonoString* mono_string_new_wrapper(const(char)* text);
	MonoString* mono_string_new_len(MonoDomain* domain,
			const(char)* text, uint length);
	alias da_mono_string_new_utf32 = MonoString* function(MonoDomain* domain,
			const(mono_unichar4)* text, int len);
	alias da_mono_string_to_utf8 = char* function(MonoString* string_obj);
	alias da_mono_string_to_utf8_checked = char* function(MonoString* string_obj, MonoError* error);
	alias da_mono_string_to_utf16 = mono_unichar2* function(MonoString* string_obj);
	alias da_mono_string_to_utf32 = mono_unichar4* function(MonoString* string_obj);
	alias da_mono_string_from_utf16 = MonoString* function(mono_unichar2* data);
	alias da_mono_string_from_utf32 = MonoString* function(mono_unichar4* data);
	mono_bool mono_string_equal(MonoString* s1, MonoString* s2);
	uint mono_string_hash(MonoString* s);
	int mono_object_hash(MonoObject* obj);
	MonoString* mono_object_to_string(MonoObject* obj, MonoObject** exc);
	MonoObject* mono_value_box(MonoDomain* domain, MonoClass* klass, void* val);
	void mono_value_copy(void* dest, void* src, MonoClass* klass);
	void mono_value_copy_array(MonoArray* dest,
			int dest_idx, void* src, int count);
	MonoDomain* mono_object_get_domain(MonoObject* obj);
	MonoClass* mono_object_get_class(MonoObject* obj);
	void* mono_object_unbox(MonoObject* obj);
	MonoObject* mono_object_clone(MonoObject* obj);
	MonoObject* mono_object_isinst(MonoObject* obj, MonoClass* klass);
	MonoObject* mono_object_isinst_mbyref(MonoObject* obj, MonoClass* klass);
	MonoObject* mono_object_castclass_mbyref(MonoObject* obj, MonoClass* klass);
	mono_bool mono_monitor_try_enter(MonoObject* obj, uint ms);
	mono_bool mono_monitor_enter(MonoObject* obj);
	alias da_mono_monitor_enter_v4 = void function(MonoObject* obj, char* lock_taken);
	uint mono_object_get_size(MonoObject* o);
	void mono_monitor_exit(MonoObject* obj);
	void mono_raise_exception(MonoException* ex);
	void mono_runtime_object_init(MonoObject* this_obj);
	void mono_runtime_class_init(MonoVTable* vtable);
	MonoMethod* mono_object_get_virtual_method(MonoObject* obj,
			MonoMethod* method);
	MonoObject* mono_runtime_invoke(MonoMethod* method,
			void* obj, void** params, MonoObject** exc);
	MonoMethod* mono_get_delegate_invoke(MonoClass* klass);
	MonoMethod* mono_get_delegate_begin_invoke(MonoClass* klass);
	MonoMethod* mono_get_delegate_end_invoke(MonoClass* klass);
	MonoObject* mono_runtime_delegate_invoke(MonoObject* delegate_,
			void** params, MonoObject** exc);
	MonoObject* mono_runtime_invoke_array(MonoMethod* method,
			void* obj, MonoArray* params, MonoObject** exc);
	void* mono_method_get_unmanaged_thunk(MonoMethod* method);
	MonoArray* mono_runtime_get_main_args();
	void mono_runtime_exec_managed_code(MonoDomain* domain,
			MonoMainThreadFunc main_func, void* main_args);
	int mono_runtime_run_main(MonoMethod* method, int argc,
			char** argv, MonoObject** exc);
	int mono_runtime_exec_main(MonoMethod* method,
			MonoArray* args, MonoObject** exc);
	int mono_runtime_set_main_args(int argc, char** argv);
	void* mono_load_remote_field(MonoObject* this_obj,
			MonoClass* klass, MonoClassField* field, void** res);
	MonoObject* mono_load_remote_field_new(MonoObject* this_obj,
			MonoClass* klass, MonoClassField* field);
	void mono_store_remote_field(MonoObject* this_obj,
			MonoClass* klass, MonoClassField* field, void* val);
	void mono_store_remote_field_new(MonoObject* this_obj,
			MonoClass* klass, MonoClassField* field, MonoObject* arg);
	void mono_unhandled_exception(MonoObject* exc);
	void mono_print_unhandled_exception(MonoObject* exc);
	void* mono_compile_method(MonoMethod* method);
	void mono_field_set_value(MonoObject* obj,
			MonoClassField* field, void* value);
	void mono_field_static_set_value(MonoVTable* vt,
			MonoClassField* field, void* value);
	void mono_field_get_value(MonoObject* obj,
			MonoClassField* field, void* value);
	void mono_field_static_get_value(MonoVTable* vt,
			MonoClassField* field, void* value);
	MonoObject* mono_field_get_value_object(MonoDomain* domain,
			MonoClassField* field, MonoObject* obj);
	void mono_property_set_value(MonoProperty* prop,
			void* obj, void** params, MonoObject** exc);
	MonoObject* mono_property_get_value(MonoProperty* prop,
			void* obj, void** params, MonoObject** exc);
	uint mono_gchandle_new(MonoObject* obj, mono_bool pinned);
	uint mono_gchandle_new_weakref(MonoObject* obj, mono_bool track_resurrection);
	MonoObject* mono_gchandle_get_target(uint gchandle);
	void mono_gchandle_free(uint gchandle);
	MonoReferenceQueue* mono_gc_reference_queue_new(
			mono_reference_queue_callback callback);
	void mono_gc_reference_queue_free(MonoReferenceQueue* queue);
	mono_bool mono_gc_reference_queue_add(MonoReferenceQueue* queue,
			MonoObject* obj, void* user_data);
	void mono_gc_wbarrier_set_field(MonoObject* obj,
			void* field_ptr, MonoObject* value);
	void mono_gc_wbarrier_set_arrayref(MonoArray* arr,
			void* slot_ptr, MonoObject* value);
	void mono_gc_wbarrier_arrayref_copy(void* dest_ptr, void* src_ptr, int count);
	void mono_gc_wbarrier_generic_store(void* ptr, MonoObject* value);
	void mono_gc_wbarrier_generic_store_atomic(void* ptr, MonoObject* value);
	void mono_gc_wbarrier_generic_nostore(void* ptr);
	void mono_gc_wbarrier_value_copy(void* dest, void* src,
			int count, MonoClass* klass);
	void mono_gc_wbarrier_object_copy(MonoObject* obj, MonoObject* src);
	// metadata/opcodes.h
	const(char)* mono_opcode_name(int opcode);
	MonoOpcodeEnum mono_opcode_value(const(mono_byte*)* ip,
			const(mono_byte)* end);
	// metadata/profiler.h
	void mono_profiler_install(MonoProfiler* prof,
			MonoProfileFunc shutdown_callback);
	void mono_profiler_set_events(MonoProfileFlags events);
	MonoProfileFlags mono_profiler_get_events();
	void mono_profiler_install_appdomain(
			MonoProfileAppDomainFunc start_load, MonoProfileAppDomainResult end_load,
			MonoProfileAppDomainFunc start_unload, MonoProfileAppDomainFunc end_unload);
	void mono_profiler_install_appdomain_name(
			MonoProfileAppDomainFriendlyNameFunc domain_name_cb);
	void mono_profiler_install_context(MonoProfileContextFunc load,
			MonoProfileContextFunc unload);
	void mono_profiler_install_assembly(MonoProfileAssemblyFunc start_load,
			MonoProfileAssemblyResult end_load, MonoProfileAssemblyFunc start_unload,
			MonoProfileAssemblyFunc end_unload);
	void mono_profiler_install_module(MonoProfileModuleFunc start_load,
			MonoProfileModuleResult end_load, MonoProfileModuleFunc start_unload,
			MonoProfileModuleFunc end_unload);
	void mono_profiler_install_class(MonoProfileClassFunc start_load,
			MonoProfileClassResult end_load, MonoProfileClassFunc start_unload,
			MonoProfileClassFunc end_unload);
	void mono_profiler_install_jit_compile(
			MonoProfileMethodFunc start, MonoProfileMethodResult end);
	void mono_profiler_install_jit_end(MonoProfileJitResult end);
	void mono_profiler_install_method_free(MonoProfileMethodFunc callback);
	void mono_profiler_install_method_invoke(
			MonoProfileMethodFunc start, MonoProfileMethodFunc end);
	void mono_profiler_install_enter_leave(
			MonoProfileMethodFunc enter, MonoProfileMethodFunc fleave);
	void mono_profiler_install_thread(MonoProfileThreadFunc start,
			MonoProfileThreadFunc end);
	void mono_profiler_install_thread_name(
			MonoProfileThreadNameFunc thread_name_cb);
	void mono_profiler_install_transition(MonoProfileMethodResult callback);
	void mono_profiler_install_allocation(MonoProfileAllocFunc callback);
	void mono_profiler_install_monitor(MonoProfileMonitorFunc callback);
	void mono_profiler_install_statistical(MonoProfileStatFunc callback);
	void mono_profiler_install_statistical_call_chain(MonoProfileStatCallChainFunc callback,
			int call_chain_depth, MonoProfilerCallChainStrategy call_chain_strategy);
	void mono_profiler_install_exception(MonoProfileExceptionFunc throw_callback,
			MonoProfileMethodFunc exc_method_leave, MonoProfileExceptionClauseFunc clause_callback);
	void mono_profiler_install_coverage_filter(
			MonoProfileCoverageFilterFunc callback);
	void mono_profiler_coverage_get(MonoProfiler* prof,
			MonoMethod* method, MonoProfileCoverageFunc func);
	void mono_profiler_install_gc(MonoProfileGCFunc callback,
			MonoProfileGCResizeFunc heap_resize_callback);
	void mono_profiler_install_gc_moves(MonoProfileGCMoveFunc callback);
	void mono_profiler_install_gc_roots(
			MonoProfileGCHandleFunc handle_callback, MonoProfileGCRootFunc roots_callback);
	void mono_profiler_install_gc_finalize(MonoProfileGCFinalizeFunc begin,
			MonoProfileGCFinalizeObjectFunc begin_obj,
			MonoProfileGCFinalizeObjectFunc end_obj, MonoProfileGCFinalizeFunc end);
	void mono_profiler_install_runtime_initialized(
			MonoProfileFunc runtime_initialized_callback);
	void mono_profiler_install_code_chunk_new(MonoProfilerCodeChunkNew callback);
	void mono_profiler_install_code_chunk_destroy(
			MonoProfilerCodeChunkDestroy callback);
	void mono_profiler_install_code_buffer_new(
			MonoProfilerCodeBufferNew callback);
	void mono_profiler_install_iomap(MonoProfileIomapFunc callback);
	void mono_profiler_load(const(char)* desc);
	void mono_profiler_set_statistical_mode(
			MonoProfileSamplingMode mode, long sampling_frequency_hz);
	// metadata/reflection.h
	int mono_reflection_parse_type(char* name, MonoTypeNameParse* info);
	MonoType* mono_reflection_get_type(MonoImage* image,
			MonoTypeNameParse* info, mono_bool ignorecase, mono_bool* type_resolve);
	void mono_reflection_free_type_info(MonoTypeNameParse* info);
	MonoType* mono_reflection_type_from_name(char* name, MonoImage* image);
	uint mono_reflection_get_token(MonoObject* obj);
	MonoReflectionAssembly* mono_assembly_get_object(
			MonoDomain* domain, MonoAssembly* assembly);
	MonoReflectionModule* mono_module_get_object(MonoDomain* domain,
			MonoImage* image);
	MonoReflectionModule* mono_module_file_get_object(
			MonoDomain* domain, MonoImage* image, int table_index);
	MonoReflectionType* mono_type_get_object(MonoDomain* domain, MonoType* type);
	MonoReflectionMethod* mono_method_get_object(MonoDomain* domain,
			MonoMethod* method, MonoClass* refclass);
	MonoReflectionField* mono_field_get_object(MonoDomain* domain,
			MonoClass* klass, MonoClassField* field);
	MonoReflectionProperty* mono_property_get_object(
			MonoDomain* domain, MonoClass* klass, MonoProperty* property);
	MonoReflectionEvent* mono_event_get_object(MonoDomain* domain,
			MonoClass* klass, MonoEvent* event);
	MonoArray* mono_param_get_objects(MonoDomain* domain, MonoMethod* method);
	MonoReflectionMethodBody* mono_method_body_get_object(
			MonoDomain* domain, MonoMethod* method);
	MonoObject* mono_get_dbnull_object(MonoDomain* domain);
	MonoArray* mono_reflection_get_custom_attrs_by_type(
			MonoObject* obj, MonoClass* attr_klass, MonoError* error);
	MonoArray* mono_reflection_get_custom_attrs(MonoObject* obj);
	MonoArray* mono_reflection_get_custom_attrs_data(MonoObject* obj);
	MonoArray* mono_reflection_get_custom_attrs_blob(
			MonoReflectionAssembly* assembly, MonoObject* ctor,
			MonoArray* ctorArgs,
			MonoArray* properties, MonoArray* porpValues, MonoArray* fields,
			MonoArray* fieldValues);
	MonoCustomAttrInfo* mono_reflection_get_custom_attrs_info(MonoObject* obj);
	MonoArray* mono_custom_attrs_construct(MonoCustomAttrInfo* cinfo);
	MonoCustomAttrInfo* mono_custom_attrs_from_index(MonoImage* image, uint idx);
	MonoCustomAttrInfo* mono_custom_attrs_from_method(MonoMethod* method);
	MonoCustomAttrInfo* mono_custom_attrs_from_class(MonoClass* klass);
	MonoCustomAttrInfo* mono_custom_attrs_from_assembly(MonoAssembly* assembly);
	MonoCustomAttrInfo* mono_custom_attrs_from_property(
			MonoClass* klass, MonoProperty* property);
	MonoCustomAttrInfo* mono_custom_attrs_from_event(
			MonoClass* klass, MonoEvent* event);
	MonoCustomAttrInfo* mono_custom_attrs_from_field(
			MonoClass* klass, MonoClassField* field);
	MonoCustomAttrInfo* mono_custom_attrs_from_param(
			MonoMethod* method, uint param);
	mono_bool mono_custom_attrs_has_attr(MonoCustomAttrInfo* ainfo,
			MonoClass* attr_klass);
	MonoObject* mono_custom_attrs_get_attr(
			MonoCustomAttrInfo* ainfo, MonoClass* attr_klass);
	void mono_custom_attrs_free(MonoCustomAttrInfo* ainfo);
	uint mono_declsec_flags_from_method(MonoMethod* method);
	uint mono_declsec_flags_from_class(MonoClass* klass);
	uint mono_declsec_flags_from_assembly(MonoAssembly* assembly);
	MonoBoolean mono_declsec_get_demands(MonoMethod* callee,
			MonoDeclSecurityActions* demands);
	MonoBoolean mono_declsec_get_linkdemands(MonoMethod* callee,
			MonoDeclSecurityActions* klass, MonoDeclSecurityActions* cmethod);
	MonoBoolean mono_declsec_get_inheritdemands_class(
			MonoClass* klass, MonoDeclSecurityActions* demands);
	MonoBoolean mono_declsec_get_inheritdemands_method(
			MonoMethod* callee, MonoDeclSecurityActions* demands);
	MonoBoolean mono_declsec_get_method_action(MonoMethod* method,
			uint action, MonoDeclSecurityEntry* entry);
	MonoBoolean mono_declsec_get_class_action(MonoClass* klass,
			uint action, MonoDeclSecurityEntry* entry);
	MonoBoolean mono_declsec_get_assembly_action(
			MonoAssembly* assembly, uint action, MonoDeclSecurityEntry* entry);
	MonoType* mono_reflection_type_get_type(MonoReflectionType* reftype);
	MonoAssembly* mono_reflection_assembly_get_assembly(
			MonoReflectionAssembly* refassembly);
	// metadata/row-indexes.h
	// metadata/sgen-bridge.h
	void mono_gc_register_bridge_callbacks(MonoGCBridgeCallbacks* callbacks);
	void mono_gc_wait_for_bridge_processing();
	// metadata/threads.h
	void mono_thread_init(MonoThreadStartCB start_cb,
			MonoThreadAttachCB attach_cb);
	void mono_thread_cleanup();
	void mono_thread_manage();
	MonoThread* mono_thread_current();
	void mono_thread_set_main(MonoThread* thread);
	MonoThread* mono_thread_get_main();
	void mono_thread_stop(MonoThread* thread);
	void mono_thread_new_init(intptr_t tid, void* stack_start, void* func);
	void mono_thread_create(MonoDomain* domain, void* func, void* arg);
	MonoThread* mono_thread_attach(MonoDomain* domain);
	void mono_thread_detach(MonoThread* thread);
	void mono_thread_exit();
	alias da_mono_thread_get_name_utf8 = char* function(MonoThread* thread);
	int mono_thread_get_managed_id(MonoThread* thread);
	void mono_thread_set_manage_callback(MonoThread* thread,
			MonoThreadManageCallback func);
	void mono_threads_set_default_stacksize(uint stacksize);
	uint mono_threads_get_default_stacksize();
	void mono_threads_request_thread_dump();
	mono_bool mono_thread_is_foreign(MonoThread* thread);
	mono_bool mono_thread_detach_if_exiting();
	// metadata/tokentype.h
	// metadata/verify.h
	void* mono_method_verify(MonoMethod* method, int level);
	void mono_free_verify_list(void* list);
	char* mono_verify_corlib();
	// jit/jit.h
	MonoDomain* mono_jit_init(const(char)* file);
	MonoDomain* mono_jit_init_version(const(char)* root_domain_name,
			const(char)* runtime_version);
	int mono_jit_exec(MonoDomain* domain,
			MonoAssembly* assembly, int argc, char** argv);
	void mono_jit_cleanup(MonoDomain* domain);
	mono_bool mono_jit_set_trace_options(const(char)* options);
	void mono_set_signal_chaining(mono_bool chain_signals);
	void mono_set_crash_chaining(mono_bool chain_signals);
	void mono_jit_set_aot_only(mono_bool aot_only);
	void mono_jit_set_aot_mode(MonoAotMode mode);
	void mono_set_break_policy(MonoBreakPolicyFunc policy_callback);
	void mono_jit_parse_options(int argc, char** argv);
	char* mono_get_runtime_build_info();
	MonoJitInfo* mono_get_jit_info_from_method(MonoDomain* domain,
			MonoMethod* method);
	void* mono_aot_get_method(MonoDomain* domain, MonoMethod* method);
}
